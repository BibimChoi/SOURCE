// 방문자 패턴의 의미!!
class Shape
{
	virtual void Draw() = 0;
};
class Rect : public Shape {};
class Circle : public Shape {};

// 전통적인 객체지향 디자인. 쉽다, 어렵다로 채워 보세요.
// 클래스의 추가    :  쉬운 작업(다형성을 잘 사용해서 코드를 작성했다면)
// 가상 함수의 추가 :  어렵다..모든 파생 클래스가 변경되어야 한다.

// 그런데, 방문자 패턴의 중요한 특징은 위 개념을 반대로 만들다는 점 입니다.

// 방문자 패턴으로 디자인 하면
// 클래스의 추가 : 어렵다.
// 함수의 추가   : 쉬워 진다.




